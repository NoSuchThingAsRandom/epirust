{"version":3,"sources":["time-series/FileDataInput.js","time-series/diseases.js","time-series/DiseaseDynamics.js","time-series/Interventions.js","time-series/ParamtersForm.js","time-series/DataInputs.js","time-series/LineGraph.js","time-series/SocketAwareGraph.js","time-series/index.js","App.js","index.js"],"names":["FileDataInput","onFileDataSubmit","className","htmlFor","type","id","data-testid","name","onChange","e","file","target","files","fileEnd","size","reader","FileReader","onloadend","evt","readyState","DONE","fileData","JSON","parse","result","readAsBinaryString","slice","accept","diseases","DiseaseDynamics","disease","event","diseaseSelected","value","map","field","document","getElementById","aria-describedby","placeholder","defaultValue","Object","keys","disease_key","key","label","Interventions","VaccineInputs","LockdownInputs","HospitalSpreadInputs","useState","showVaccine","setShowVaccine","checked","step","showLockdown","setShowLockdown","showHospitalSpread","setShowHospitalSpread","ParametersForm","onDataSubmit","onSubmit","preventDefault","paramsData","FormData","forEach","includes","Number","min","max","DataInputs","onFileDataInput","data","fetch","method","headers","body","stringify","then","Graph","dataBuffer","enableExport","graph","setGraph","useEffect","length","destroy","updateOptions","graphInstance","Dygraph","labels","legend","animatedZooms","title","ylabel","xlabel","showRoller","onClick","a","createElement","download","href","encodeURIComponent","appendChild","click","removeChild","disabled","SocketAwareGraph","socket","setDataBuffer","simulationEnded","setSimulationEnded","buff","on","messageRaw","message","simulationEndedTemp","hour","susceptible","infected","quarantined","recovered","deceased","push","buffer","total","TimeSeries","setSocket","setFileData","startSocket","io","close","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.3b8c73fd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nexport default function FileDataInput({ onFileDataSubmit }) {\n\n    function handleFileUpload(e) {\n        const file = e.target.files[0];\n\n        var fileStart = 0;\n        var fileEnd = file.size;\n\n        var reader = new FileReader();\n\n        // If we use onloadend, we need to check the readyState.\n        reader.onloadend = function (evt) {\n            if (evt.target.readyState === FileReader.DONE) {\n                let fileData = JSON.parse(evt.target.result)\n                return onFileDataSubmit(fileData);\n            }\n        };\n\n        reader.readAsBinaryString(file.slice(fileStart, fileEnd));\n    }\n\n    return (\n        <form className=\"file-input\">\n            <label htmlFor=\"import-input\">Choose a file to import data from:</label>\n            < input\n                type=\"file\"\n                id=\"import-input\"\n                data-testid=\"import-input\"\n                name=\"import\"\n                onChange={handleFileUpload}\n                accept=\"application/json\" >\n            </input >\n            <br />\n            <small className=\"form-text text-muted\">You can export a data file when a graph is plotted, for importing later.</small>\n        </form>\n    )\n}\n\nFileDataInput.propTypes = {\n    onFileDataSubmit: PropTypes.func.isRequired\n}","export const diseases = {\n    \"small_pox\": {\n      \"label\": \"Small Pox\", \n      \"regular_transmission_start_day\": 10,\n      \"high_transmission_start_day\": 16,\n      \"last_day\": 22,\n      \"regular_transmission_rate\": 0.05,\n      \"high_transmission_rate\": 0.5,\n      \"death_rate\": 0.2\n    },\n    \"sars\": {\n      \"label\": \"SARS\", \n      \"regular_transmission_start_day\": 5,\n      \"high_transmission_start_day\": 10,\n      \"last_day\": 23,\n      \"regular_transmission_rate\": 0.025,\n      \"high_transmission_rate\": 0.25,\n      \"death_rate\": 0.1\n    },\n    \"covid_19\": {\n      \"label\": \"COVID-19\", \n      \"regular_transmission_start_day\": 5,\n      \"high_transmission_start_day\": 20,\n      \"last_day\": 40,\n      \"regular_transmission_rate\": 0.025,\n      \"high_transmission_rate\": 0.25,\n      \"death_rate\": 0.2\n    }\n  }","import React, { useState } from 'react'\nimport { diseases } from './diseases'\n\nexport default function DiseaseDynamics() {\n    const disease = diseases[\"small_pox\"];\n\n    function handleDiseaseSelect(event) {\n        const diseaseSelected = diseases[event.target.value]\n        const diseaseDynamics = [\"regular_transmission_start_day\", \"high_transmission_start_day\", \"last_day\", \"regular_transmission_rate\", \"high_transmission_rate\", \"death_rate\"]\n\n        diseaseDynamics.map(field => {\n            document.getElementById(field).value = diseaseSelected[field]\n        })\n    }\n\n    return (\n        <fieldset>\n            <legend>Disease Dynamics</legend>\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"disease_name\">Disease Name</label>\n                <select data-testid=\"select-disease\" name=\"disease_name\" onChange={handleDiseaseSelect} className=\"form-control form-control-sm\" id=\"disease_name\" aria-describedby=\"disease_name\" placeholder=\"Disease Name\" defaultValue=\"small_pox\">\n                    {Object.keys(diseases).map((disease_key) => {\n                        return (<option key={disease_key} value={disease_key}>{diseases[disease_key].label}</option>)\n                    })}\n                </select>\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"regular_transmission_start_day\">Regular Transmission Start Day</label>\n                <input type=\"text\" name=\"regular_transmission_start_day\" className=\"form-control form-control-sm\" id=\"regular_transmission_start_day\" aria-describedby=\"regular_transmission_start_day\" placeholder=\"Regular Transmission Start Day\" defaultValue={disease[\"regular_transmission_start_day\"]} />\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"high_transmission_start_day\">High Transmission Start Day</label>\n                <input type=\"text\" name=\"high_transmission_start_day\" className=\"form-control form-control-sm\" id=\"high_transmission_start_day\" aria-describedby=\"high_transmission_start_day\" placeholder=\"High Transmission Start Day\" defaultValue={disease[\"high_transmission_start_day\"]} />\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"last_day\">Last Day</label>\n                <input type=\"text\" name=\"last_day\" className=\"form-control form-control-sm\" id=\"last_day\" aria-describedby=\"last_day\" placeholder=\"Last Day\" defaultValue={disease[\"last_day\"]} />\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"regular_transmission_rate\">Regular Transmission Rate</label>\n                <input type=\"text\" name=\"regular_transmission_rate\" className=\"form-control form-control-sm\" id=\"regular_transmission_rate\" aria-describedby=\"regular_transmission_rate\" placeholder=\"Regular Transmission Rate\" defaultValue={disease[\"regular_transmission_rate\"]} />\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"high_transmission_rate\">High Transmission Rate</label>\n                <input type=\"text\" name=\"high_transmission_rate\" className=\"form-control form-control-sm\" id=\"high_transmission_rate\" aria-describedby=\"high_transmission_rate\" placeholder=\"High Transmission Rate\" defaultValue={disease[\"high_transmission_rate\"]} />\n            </div>\n\n            <div className=\"input-control\">\n                <label className=\"col-form-label-sm\" htmlFor=\"death_rate\">Death Rate</label>\n                <input type=\"text\" name=\"death_rate\" className=\"form-control form-control-sm\" id=\"death_rate\" aria-describedby=\"death_rate\" placeholder=\"Death Rate\" defaultValue={disease[\"death_rate\"]} />\n            </div>\n        </fieldset>\n    )\n}\n","import React, { useState } from 'react';\n\nexport default function Interventions() {\n    return (\n        <fieldset>\n            <legend>Interventions</legend>\n            <small className=\"form-text text-muted\">Only the active interventions will be taken into consideration</small>\n            <VaccineInputs />\n            <LockdownInputs />\n            <HospitalSpreadInputs />\n        </fieldset>\n    );\n}\n\nfunction VaccineInputs() {\n    const [showVaccine, setShowVaccine] = useState(true);\n\n    function handleCheck(e) {\n        setShowVaccine(e.target.checked)\n    }\n\n    return (\n        <>\n            <div className=\"custom-control custom-switch switch-right\">\n                <input onChange={handleCheck} type=\"checkbox\" checked={showVaccine} className=\"custom-control-input\" id=\"vaccine-switch\" />\n                <label className=\"custom-control-label col-form-label-sm\" htmlFor=\"vaccine-switch\">Vaccination</label>\n            </div>\n\n            {showVaccine && (\n                <>\n                    <div className=\"input-control\">\n                        <label className=\"col-form-label-sm\" htmlFor=\"vaccinate_at\">Vaccinate At</label>\n                        <input type=\"number\" name=\"vaccinate_at\" className=\"form-control form-control-sm\" id=\"vaccinate_at\" aria-describedby=\"vaccinate_at\" placeholder=\"Vaccinate At\" defaultValue=\"5000\" />\n                    </div>\n                    <div className=\"input-control\">\n                        <label className=\"col-form-label-sm\" htmlFor=\"vaccinate_percentage\">Vaccinate Percentage</label>\n                        <input type=\"number\" name=\"vaccinate_percentage\" className=\"form-control form-control-sm\" id=\"vaccinate_percentage\" aria-describedby=\"vaccinate_percentage\" placeholder=\"Vaccinate Percentage\" defaultValue=\"0.2\" step=\"any\" />\n                    </div>\n                </>\n            )}\n        </>\n    )\n}\n\nfunction LockdownInputs() {\n    const [showLockdown, setShowLockdown] = useState(true);\n\n    function handleCheck(e) {\n        setShowLockdown(e.target.checked)\n    }\n\n    return (\n        <>\n            <div className=\"custom-control custom-switch switch-right\">\n                <input onChange={handleCheck} type=\"checkbox\" checked={showLockdown} className=\"custom-control-input\" id=\"lockdown-switch\" />\n                <label className=\"custom-control-label col-form-label-sm\" htmlFor=\"lockdown-switch\">Lockdown</label>\n            </div>\n\n            {showLockdown && (\n                <>\n                    <div className=\"input-control\">\n                        <label className=\"col-form-label-sm\" htmlFor=\"lockdown_at_number_of_infections\">Lockdown at number of infections</label>\n                        <input type=\"number\" name=\"lockdown_at_number_of_infections\" className=\"form-control form-control-sm\" id=\"lockdown_at_number_of_infections\" aria-describedby=\"lockdown_at_number_of_infections\" placeholder=\"Lockdown At(number of infections)\" defaultValue=\"100\" step=\"any\" />\n                    </div>\n                    <div className=\"input-control\">\n                        <label className=\"col-form-label-sm\" htmlFor=\"essential_workers_population\">Essentials Workers Population</label>\n                        <input type=\"number\" name=\"essential_workers_population\" className=\"form-control form-control-sm\" id=\"essential_workers_population\" aria-describedby=\"essential_workers_population\" placeholder=\"Emergency Workers Population\" defaultValue=\"0.1\" step=\"any\" />\n                    </div>\n                </>\n            )}\n        </>\n    )\n}\n\nfunction HospitalSpreadInputs() {\n    const [showHospitalSpread, setShowHospitalSpread] = useState(true);\n\n    function handleCheck(e) {\n        setShowHospitalSpread(e.target.checked)\n    }\n\n    return (\n        <>\n            <div className=\"custom-control custom-switch switch-right\">\n                <input onChange={handleCheck} type=\"checkbox\" checked={showHospitalSpread} className=\"custom-control-input\" id=\"hospital-switch\" />\n                <label className=\"custom-control-label col-form-label-sm\" htmlFor=\"hospital-switch\">Hospital Spread</label>\n            </div>\n            {showHospitalSpread && (\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"hospital_spread_rate_threshold\">Hospital Spread Rate Threshold</label>\n                    <input type=\"number\" name=\"hospital_spread_rate_threshold\" className=\"form-control form-control-sm\" id=\"hospital_spread_rate_threshold\" aria-describedby=\"hospital_spread_rate_threshold\" placeholder=\"Hospital Spread Rate Threshold\" defaultValue=\"100\" step=\"any\" />\n                </div>\n            )}\n        </>\n    );\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport DiseaseDynamics from './DiseaseDynamics'\nimport Interventions from './Interventions'\n\nexport default function ParametersForm({ onDataSubmit }) {\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        let paramsData = {}\n        new FormData(e.target).forEach(function (value, key) {\n            if ([\"number_of_agents\",\n                \"grid_size\",\n                \"simulation_hrs\",\n                \"public_transport_percentage\",\n                \"working_percentage\",\n                \"vaccinate_at\",\n                \"vaccinate_percentage\",\n                \"death_rate\",\n                \"high_transmission_rate\",\n                \"high_transmission_start_day\",\n                \"last_day\",\n                \"regular_transmission_rate\",\n                \"regular_transmission_start_day\",\n                \"lockdown_at_number_of_infections\",\n                \"essential_workers_population\",\n                \"hospital_spread_rate_threshold\"].includes(key)) {\n                value = Number(value);\n            }\n            paramsData[key] = value;\n        });\n\n        onDataSubmit(paramsData)\n    }\n\n    function renderPopulation() {\n        return (\n            <fieldset>\n                <legend>Population</legend>\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"number_of_agents\">Number of Agents</label>\n                    <input type=\"number\" name=\"number_of_agents\" className=\"form-control form-control-sm\" id=\"number_of_agents\" aria-describedby=\"number_of_agents\" placeholder=\"Number of Agents\" defaultValue=\"10000\" />\n                </div>\n\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"public_transport_percentage\">Public Transport Percentage</label>\n                    <input type=\"number\" name=\"public_transport_percentage\" className=\"form-control form-control-sm\" id=\"public_transport_percentage\" aria-describedby=\"public_transport_percentage\" placeholder=\"Public Transport Percentage\" defaultValue=\"0.2\" step=\"any\" />\n                </div>\n\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"working_percentage\">Working Percentage</label>\n                    <input type=\"number\" name=\"working_percentage\" className=\"form-control form-control-sm\" id=\"working_percentage\" aria-describedby=\"working_percentage\" placeholder=\"Working Percentage\" min=\"0\" max=\"1\" defaultValue=\"0.7\" step=\"any\" />\n                </div>\n            </fieldset>\n        )\n    }\n\n    function renderMiscellaneousConfig() {\n        return (\n            <fieldset>\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"grid_size\">Grid Size</label>\n                    <input type=\"number\" name=\"grid_size\" className=\"form-control form-control-sm\" id=\"grid_size\" aria-describedby=\"grid_size\" placeholder=\"Grid Size\" defaultValue=\"250\" />\n                </div>\n\n\n                <div className=\"input-control\">\n                    <label className=\"col-form-label-sm\" htmlFor=\"simulation_hrs\">Simulation Hours</label>\n                    <input type=\"number\" name=\"simulation_hrs\" className=\"form-control form-control-sm\" id=\"simulation_hrs\" aria-describedby=\"simulation_hrs\" placeholder=\"Simulation Hours\" defaultValue=\"10000\" />\n                </div>\n            </fieldset>\n        )\n    }\n\n    return (\n        <form className=\"user-inputs\" onSubmit={handleSubmit} data-testid='simulationForm'>\n\n            <div className=\"form-row\">\n\n                <div className=\"col inputs\">\n                    <div>\n                        {renderPopulation()}\n                        {renderMiscellaneousConfig()}\n                    </div>\n                    <DiseaseDynamics />\n                    <Interventions />\n                </div>\n                <div className=\"col actions\">\n                    <button type=\"submit\" className=\"btn btn-primary\" id=\"submitBtn\">Start</button>\n                </div>\n            </div>\n\n        </form>\n    )\n}\n\nParametersForm.propTypes = {\n    onDataSubmit: PropTypes.func.isRequired\n}","import React from 'react';\nimport FileDataInput from './FileDataInput';\nimport ParametersForm from './ParamtersForm';\nimport PropTypes from 'prop-types'\n\nexport default function DataInputs({ onSubmit, onFileDataInput }) {\n\n    function pushData(paramsData) {\n        return fetch(\"http://localhost:3000/simulation/init\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(paramsData)\n        });\n    }\n\n    function handleSubmittedData(data) {\n        pushData(data).then(\n            onSubmit()\n        );\n    }\n\n    function handleFileData(data) {\n        onFileDataInput(data)\n    }\n\n    return (\n        <div className=\"graph-input\">\n            <ParametersForm onDataSubmit={handleSubmittedData} />\n            <FileDataInput onFileDataSubmit={handleFileData} />\n        </div>\n    )\n}\n\nDataInputs.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    onFileDataInput: PropTypes.func.isRequired\n}","import React from 'react';\nimport Dygraph from 'dygraphs';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'\n\nexport default function Graph({ dataBuffer , enableExport = false}) {\n    const [graph, setGraph] = useState(null);\n    useEffect(() => {\n        if (dataBuffer.length === 0) {\n            graph && graph.destroy()\n            setGraph();\n            return\n        }\n        if (!graph) {\n            let graphInstance = new Dygraph(document.getElementById(\"vis\"), dataBuffer, {\n                labels: [\"hour\", \"susceptible\", \"infected\", \"quarantined\", \"recovered\", \"deceased\"],\n                legend: 'always',\n                animatedZooms: true,\n                title: 'Time Series Graph',\n                ylabel: 'Number of Agents',\n                xlabel: 'Hours',\n                showRoller: true\n            });\n\n            setGraph(graphInstance)\n        }\n        else {\n            graph.updateOptions({ 'file': dataBuffer });\n        }\n    }, [graph, dataBuffer])\n\n    function handleExportClick() {\n        let filename = \"export.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n\n        var a = document.createElement('a');\n        a.download = filename;\n        a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(dataBuffer));\n        a.target = '_blank';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n\n    return (\n        <div className=\"graph-wrap\">\n\n            <div id=\"vis\" data-testid=\"visualization\"></div>\n\n            <div className=\"graph-actions\">\n                <p className=\"action\">Zoom: <span className='control'>click-drag</span></p>\n                <p className=\"action\">Pan: <span className='control'>shift-click-drag</span></p>\n                <p className=\"action\">Restore: <span className='control'>double-click</span></p>\n                <button onClick={handleExportClick} className=\"btn btn-secondary\" disabled={!enableExport}>Export graph</button>\n            </div>\n\n        </div>\n    );\n}\n\nGraph.propTypes = {\n    dataBuffer: PropTypes.array.isRequired,\n    enableExport: PropTypes.bool\n}\n\n","import React, { useState, useEffect } from 'react';\nimport Graph from './LineGraph';\nimport PropTypes from 'prop-types'\n\nexport default function SocketAwareGraph({ socket }) {\n    const [dataBuffer, setDataBuffer] = useState([]);\n    const [simulationEnded, setSimulationEnded] = useState(false);\n    useEffect(() => {\n\n        if (!socket) {\n            setDataBuffer([])\n            return\n        }\n\n        let buff = [];\n\n        socket.on('epidemicStats', function (messageRaw) {\n            const message = JSON.parse(messageRaw);\n\n            let simulationEndedTemp = false\n            if (\"simulation_ended\" in message) {\n                simulationEndedTemp = true;\n            }\n            else {\n                const { hour, susceptible, infected, quarantined, recovered, deceased } = message;\n                buff.push([hour, susceptible, infected, quarantined, recovered, deceased]);\n            }\n            if (message.hour % 100 === 0 || simulationEndedTemp) {\n                setDataBuffer(buffer => {\n                    let total = [...buffer, ...buff]\n                    buff = [];\n                    return total;\n                });\n            }\n            if(simulationEndedTemp) {\n                setSimulationEnded(true)\n            }\n        });\n    }, [socket])\n\n    return <Graph dataBuffer={dataBuffer} enableExport={simulationEnded}/>\n}\n\nSocketAwareGraph.propTypes = {\n    socket: PropTypes.object\n}","import React from 'react';\nimport DataInputs from './DataInputs';\nimport { useState } from 'react';\nimport io from 'socket.io-client'\nimport SocketAwareGraph from './SocketAwareGraph'\nimport Graph from './LineGraph';\n\nfunction TimeSeries() {\n    const [socket, setSocket] = useState(null);\n    const [fileData, setFileData] = useState([]);\n\n    function startSimulation() {\n        return fetch(\"http://localhost:3000/simulation\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    function startSocket() {\n        setSocket(io('http://localhost:3000/'));\n    }\n\n    function handleFormSubmit() {\n        if (socket) {\n            socket.close()\n            setSocket(null)\n        }\n\n        if (fileData.length > 1) {\n            setFileData([])\n        }\n\n        startSimulation()\n            .then(startSocket)\n    }\n\n    function handleFileData(data) {\n        if (socket) {\n            socket.close()\n            setSocket(null);\n        }\n        setFileData(data)\n    }\n\n    return (\n        <>\n            <DataInputs onFileDataInput={handleFileData} onSubmit={handleFormSubmit} />\n            {fileData.length > 1 ? <Graph dataBuffer={fileData} /> : <SocketAwareGraph socket={socket} />}\n        </>\n    );\n}\n\nexport default TimeSeries;","/*\n * EpiRust\n * Copyright (c) 2020  ThoughtWorks, Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport React from 'react';\nimport TimeSeries from './time-series';\n\nfunction App() {\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"/\">EpiViz</a>\n      </nav>\n      <div className=\"container-fluid mt-4\">\n        <TimeSeries />\n      </div>\n    </>\n  );\n}\n\nexport default App;","/*\n * EpiRust\n * Copyright (c) 2020  ThoughtWorks, Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}